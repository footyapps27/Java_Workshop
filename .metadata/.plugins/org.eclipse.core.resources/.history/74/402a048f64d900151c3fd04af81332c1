/**
 * 
 */
package sg.edu.nus.iss.club.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import sg.edu.nus.iss.club.BadBookingException;
import sg.edu.nus.iss.club.Booking;
import sg.edu.nus.iss.club.BookingRegister;
import sg.edu.nus.iss.club.Facility;
import sg.edu.nus.iss.club.Member;

/**
 * @author Samrat
 *
 */
public class BookingRegisterTest {// TODO - Documentation

	/********************************************************/
	// Initial Setup & TearDown
	/********************************************************/
	Member boyuan;
	Member sanjay;
	Facility swimming;
	Facility tennis;
	LocalDateTime now;
	BookingRegister register;

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		boyuan = new Member("Lin", "Boyuan", null, 0);
		sanjay = new Member("Choo", "Sanjay", null, 1);
		swimming = new Facility("Swimming");
		tennis = new Facility("Tennis");
		now = LocalDateTime.now();
		register = new BookingRegister(new HashMap<Facility, ArrayList<Booking>>());
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
		boyuan = null;
		sanjay = null;
		swimming = null;
		tennis = null;
		now = null;
		register = null;
	}

	/********************************************************/
	// Tests for AddBooking
	/********************************************************/

	@Test
	public void testAddBookingForNoException() {
		try {
			register.addBooking(boyuan, swimming, now, now.plusHours(1));
			register.addBooking(sanjay, swimming, now.plusHours(1), now.plusHours(2));
			// Check for the size
			assertEquals(2, register.getBookings(swimming, now, now.plusHours(3)).size());
		} catch (Exception e) {
			fail("Exception thrown for normal addBooking");
		}
	}

	@Test
	public void testAddBookingForException() {
		try {
			// Overlapping Bookings
			register.addBooking(boyuan, swimming, now, now.plusHours(2));
			register.addBooking(sanjay, swimming, now.plusHours(1), now.plusHours(3));
			fail("Exception NOT thrown for parallel addBooking");
		} catch (Exception e) {
			assertNotNull(e);
		}
	}

	/********************************************************/
	// Tests for GetBooking
	/********************************************************/
	@Test
	public void testGetBookingForBookingsPresent() {
		try {
			register.addBooking(boyuan, swimming, now, now.plusHours(1));
			register.addBooking(sanjay, swimming, now.plusHours(1), now.plusHours(2));
			// Check for the size
			assertEquals(2, register.getBookings(swimming, now, now.plusHours(3)).size());
		} catch (BadBookingException e) {
			fail("Exception thrown for adding non-overlapping objects");
		}
	}

	@Test
	public void testGetBookingForNoBookingsPresent() {
		// Check for the size
		assertEquals(0, register.getBookings(swimming, now, now.plusHours(3)).size());
	}

	/********************************************************/
	// Tests for RemoveBooking
	/********************************************************/
	@Test
	public void testRemoveBookingForAPresentBooking() {
		try {
			register.addBooking(boyuan, swimming, now, now.plusHours(1));
			register.addBooking(sanjay, swimming, now.plusHours(1), now.plusHours(2));
			// Remove the object
			register.removeBooking(register.getBookings(swimming, now, now.plusHours(3)).get(0));
			// Check for the size
			assertEquals(1, register.getBookings(swimming, now, now.plusHours(3)).size());
		} catch (BadBookingException e) {
			fail("Exception thrown for adding non-overlapping objects");
		}
	}
	
	@Test
	public void testRemoveBookingForAbsentBooking() {
		try {
			register.addBooking(boyuan, swimming, now, now.plusHours(1));
			register.addBooking(sanjay, swimming, now.plusHours(1), now.plusHours(2));
			// Remove the object
			register.removeBooking(new Booking(sanjay, tennis, now, now.plusHours(3)));
			// Check for the size
			assertEquals(1, register.getBookings(swimming, now, now.plusHours(3)).size());
		} catch (BadBookingException e) {
			fail("Exception thrown for adding non-overlapping objects");
		}
	}
}
